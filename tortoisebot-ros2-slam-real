# This Docker image will contain everything necessaary 
# for starting the mapping system for the real robot

# Start from Ubuntu 20.04 base image
FROM ubuntu:20.04

# Minimal setup
RUN apt-get update \
    && apt-get install -y locales lsb-release gnupg
ARG DEBIAN_FRONTEND=noninteractive
RUN dpkg-reconfigure locales

# Install ROS 2 Galactic
RUN sh -c 'echo "deb [arch=amd64,arm64] http://packages.ros.org/ros2/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros2-latest.list'
RUN apt-get update && apt-get install -y curl
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -
RUN apt-get update && apt-get install -y ros-galactic-desktop
RUN apt-get install -y python3-rosdep2
RUN rosdep init \
    && rosdep fix-permissions \
    && rosdep update

# Install necessary packages
RUN apt-get update && apt-get install -y \
    git \
    build-essential \
    python3-colcon-common-extensions \
    # python3-rosdep \
    python3-rosinstall-generator \
    python3-vcstool \
    wget \
    ros-galactic-v4l2-camera \
    ros-galactic-xacro \
    ros-galactic-urdf \
    ros-galactic-joint-state-publisher \
    ros-galactic-robot-state-publisher \
    ros-galactic-cartographer \
    ros-galactic-cartographer-ros \
    ros-galactic-nav2* \
    ros-galactic-gazebo-plugins \
    ros-galactic-teleop-twist-keyboard

# Create an overlay Colcon workspace and clone from git
RUN /bin/bash -c "source /opt/ros/galactic/setup.bash \
    && mkdir -p /ros2_ws/src \
    && cd /ros2_ws \
    && git clone -b ros2-galactic https://github.com/rigbetellabs/tortoisebot.git"
# Build the workspace
RUN /bin/bash -c "source /opt/ros/galactic/setup.bash \
    && cd /ros2_ws \
    && colcon build --symlink-install \
    && source /ros2_ws/install/setup.bash \
    && echo 'source /ros2_ws/install/setup.bash' >> ~/.bashrc"

# Set up the work directory
WORKDIR /ros2_ws
# Set up the entrypoint
# CMD /bin/bash -c "source /ros2_ws/install/setup.bash \
#     && ros2 launch tortoisebot_description rviz.launch.py"